- name: packages-install
  become: true
  become_user: root
  hosts: all
  vars_files:
    - vars.yml
  tasks:
    - name: Add the user {{ os_user }} and add it to the sudo group
      user:
        name: "{{ os_user }}"
        group: sudo
        shell: /bin/bash

    - name: Add SSH key for {{ os_user }}
      authorized_key:
        user: "{{ os_user }}"
        state: present
        key: "{{ lookup('file', pub_key) }}"

    - name: Allow {{ os_user }} to have passwordless sudo access
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL) NOPASSWD: ALL'
        validate: visudo -cf %s

    - name: Update all packages
      apt:
        upgrade: dist
        update_cache: yes
        cache_valid_time: 3600

    - name: Install prometheus-node-exporter
      apt:
        name: prometheus-node-exporter
        update_cache: yes
        state: latest

    - name: Install apache2
      apt:
        name: 
          - apache2
          - apache2-utils
        update_cache: yes
        state: latest

    - name: Enable mod_rewrite
      apache2_module:
        name: rewrite
        state: present
      notify:
        - restart-apache2

    - name: Ensure old versions of Docker are not installed.
      package:
        name:
          - docker
          - docker-engine
        state: absent

    - name: Ensure dependencies are installed.
      apt:
        name:
          - apt-transport-https
          - ca-certificates
        state: present

    - name: Ensure additional dependencies are installed (on Debian < 10 and any other systems).
      apt:
        name: gnupg2
        state: present
      when: ansible_distribution != 'Debian' or ansible_distribution_version is version('10', '<')

    - name: Ensure additional dependencies are installed (on Debian >= 10).
      apt:
        name: gnupg
        state: present
      when: ansible_distribution == 'Debian' or ansible_distribution_version is version('10', '>=')

    - name: Add Docker apt key.
      apt_key:
        url: "{{ docker_apt_gpg_key }}"
        id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
        state: present
      register: add_repository_key
      ignore_errors: "{{ docker_apt_ignore_key_error }}"

    - name: Ensure curl is present (on older systems without SNI).
      apt: 
        name: 
          - curl 
        state: present
      when: add_repository_key is failed

    - name: Add Docker apt key (alternative for older systems without SNI).
      shell: >
        curl -sSL {{ docker_apt_gpg_key }} | sudo apt-key add -
      args:
        warn: false
      when: add_repository_key is failed

    - name: Add Docker repository.
      apt_repository:
        repo: "{{ docker_apt_repository }}"
        state: present
        update_cache: true

    - name: install docker
      package:
        name: "{{ docker_package }}"
        state: "{{ docker_package_state }}"
      notify: restart-docker
      ignore_errors: "{{ ansible_check_mode }}"

    - name: ensure /etc/docker/ directory exists
      file:
        path: /etc/docker
        state: directory
        mode: 0755
      when: docker_daemon_options.keys() | length > 0

    - name: configure docker daemon options
      copy:
        content: "{{ docker_daemon_options | to_nice_json }}"
        dest: /etc/docker/daemon.json
        mode: 0644
      when: docker_daemon_options.keys() | length > 0
      notify: restart-docker

    - name: ensure Docker is started and enabled at boot
      systemd:
        name: docker
        state: "{{ docker_service_state }}"
        enabled: "{{ docker_service_enabled }}"
      ignore_errors: "{{ ansible_check_mode }}"

    - name: Ensure docker users are added to the docker group.
      user:
        name: "{{ item }}"
        groups: docker
        append: true
      with_items: "{{ docker_users }}"

    - name: check current docker-compose version.
      command: "{{ docker_compose_path }} --version"
      register: docker_compose_current_version
      changed_when: false
      failed_when: false

    - name: delete existing docker-compose version if it's different
      file:
        path: "{{ docker_compose_path }}"
        state: absent
      when: >
        docker_compose_current_version.stdout is defined
        and docker_compose_version not in docker_compose_current_version.stdout

    - name: install docker-compose (if configured).
      get_url:
        url: "{{ docker_compose_url }}"
        dest: "{{ docker_compose_path }}"
        mode: 0755
      when: >
        docker_compose_current_version.stdout is not defined
        or docker_compose_version not in docker_compose_current_version.stdout

  handlers:
    - name: restart-apache2
      service:
        name: apache2
        state: restarted

    - name: restart-docker
      systemd: 
        name: docker 
        state: "{{ docker_restart_handler_state }}"
      ignore_errors: "{{ ansible_check_mode }}"
